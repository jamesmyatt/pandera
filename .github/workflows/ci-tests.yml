name: CI Tests
on:
  push:
    branches:
      - master
      - dev
      - bugfix
      - "release/*"
  pull_request:
    branches:
      - master
      - dev
      - bugfix
      - "release/*"

env:
  DEFAULT_PYTHON: 3.8
  CI: "true"
  # Increase this value to reset cache if environment.yml has not changed
  CACHE_VERSION: 6

jobs:

  lint:
    name: Linters (${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    defaults:
      run:
        shell: bash -l {0}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip  # ubuntu location
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: python -m pip install nox
      - name: Pip info
        run: python -m pip list

      - name: Check requirements
        run: >
          nox
          -db virtualenv -r
          --non-interactive
          --python ${{ matrix.python-version }}
          --session requirements-${{ matrix.python-version }}

      - name: Check isort and black formatting
        run: >
          nox
          -db virtualenv -r
          --non-interactive
          --session black isort

      - name: Pylint
        run: >
          nox
          -db virtualenv -r
          --non-interactive
          --python ${{ matrix.python-version }}
          --session lint-${{ matrix.python-version }}

      - name: Mypy Type Checking
        run: >
          nox
          -db virtualenv -r
          --non-interactive
          --python ${{ matrix.python-version }}
          --session mypy-${{ matrix.python-version }}

  tests:
    name: >
      CI Tests (${{ matrix.python-version }}, ${{ matrix.os }}, pandas-${{ matrix.pandas-version }})
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    env:
      PYTHONUTF8: 1
      NOX_FLAGS: -v --no-install --no-venv --non-interactive
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        # python-version: ["3.7", "3.8", "3.9", "3.10"]
        python-version: ["3.10"]
        # pandas-version: ["1.1.5", "1.3.5", "latest"]
        pandas-version: ["latest"]
        include:
        - os: ubuntu-latest
          pip-cache: ~/.cache/pip
        - os: macos-latest
          pip-cache: ~/Library/Caches/pip
        - os: windows-latest
          pip-cache: ~/AppData/Local/pip/Cache
        # exclude:
        # # excluding python==3.10, pandas==1.1.5
        # - os: windows-latest
        #   python-version: "3.10"
        #   pandas-version: "1.1.5"

    steps:
      - uses: actions/checkout@v2

      - name: Cache conda
        uses: actions/cache@v2
        env:
          # Increase this value to reset cache if etc/environment.yml has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
        id: cache

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ${{ matrix.pip-cache }}
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          activate-environment: pandera-dev
          channels: conda-forge
          channel-priority: flexible
          use-only-tar-bz2: true

      - name: Install deps
        run: |
          mamba install -c conda-forge geopandas
          python -m pip install -U pip
          python -m pip install -r requirements-dev.txt

      - run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
          printenv | sort

      - name: Unit Tests - Core
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='core', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - Dask
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='dask', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - Hypotheses
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='hypotheses', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - IO
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='io', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - Strategies
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='strategies', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - Mypy
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='mypy', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - GeoPandas
        if: ${{ matrix.os != 'windows-latest'}}
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='geopandas', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - Koalas
        # if: ${{ matrix.os != 'windows-latest' }}
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='koalas', pandas='${{ matrix.pandas-version }}')"

      - name: Unit Tests - Modin-Dask [MacOS, Ubuntu]
        # if: ${{ matrix.os != 'windows-latest' }}
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='modin-dask', pandas='${{ matrix.pandas-version }}')"

      # Ray doesn't have a Python 3.10 wheel yet
      - name: Unit Tests - Modin-Ray [MacOS, Ubuntu]
        if: ${{ matrix.os != 'windows-latest' }}
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "tests(extra='modin-ray', pandas='${{ matrix.pandas-version }}')"

      - name: Upload coverage to Codecov
        uses: "codecov/codecov-action@v1"

      - name: Check Docstrings
        if: ${{ matrix.os != 'windows-latest' }}
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "doctests-${{ matrix.python-version }}"

      - name: Check Docs
        if: ${{ matrix.os != 'windows-latest' }}
        run: >
          nox ${{ env.NOX_FLAGS }}
          --session "docs-${{ matrix.python-version }}"
